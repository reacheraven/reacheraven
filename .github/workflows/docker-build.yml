name: docker-build

on:
  workflow_call:
    inputs:
      registry_image:
        description: "Docker image name"
        required: true
        type: string

env:
  REGISTRY_IMAGE: ${{ inputs.registry_image }}

jobs:
  prepare:
    name: Prepare & Versioning
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
      version: ${{ steps.versioning.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Next Version
        id: versioning
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n1)
          echo "Latest tag: $latest_tag"
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.0.0"
          fi
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          commit_msg=$(git log -1 --pretty=%B | tr '[:upper:]' '[:lower:]')
          if [[ "$commit_msg" == *"major"* ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "$commit_msg" == *"minor"* ]]; then
            minor=$((minor + 1)); patch=0
          else
            patch=$((patch + 1))
          fi
          new_version="v$major.$minor.$patch"
          echo "New version: $new_version"
          git tag "$new_version"
          git push origin "$new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Define Build Matrix
        id: platforms
        run: |
          echo "matrix=[\"linux/amd64\",\"linux/arm64\"]" >> $GITHUB_OUTPUT

      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ steps.versioning.outputs.version }}
            type=raw,value=latest

      - name: Prepare Meta Definition File
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "${{ runner.temp }}/bake-meta.json"

      - name: Upload Meta Definition Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build_push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Platform Pair
        id: platform_pair
        run: |
          platform="${{ matrix.platform }}"
          echo "platformPair=${platform//\//-}" >> $GITHUB_OUTPUT

      - name: Download Meta Definition Artifact
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image with Cache
        id: bake
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/bake-meta.json
          targets: image
          set: |
            *.tags=${{ env.REGISTRY_IMAGE }}
            *.platform=${{ matrix.platform }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max,ref=${{ env.REGISTRY_IMAGE }}:cache

      - name: Export Digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload Digest Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "digests-${{ steps.platform_pair.outputs.platformPair }}"
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Create & Push Manifest List
    runs-on: ubuntu-latest
    needs: [build_push]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Meta Definition Artifact
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Download Digest Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create & Push Manifest
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.REGISTRY_IMAGE }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/bake-meta.json) \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  cleanup:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [prepare, build_push, manifest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove Tag on Failure
        run: |
          git tag -d "${{ needs.prepare.outputs.version }}" || true
          git push origin :refs/tags/${{ needs.prepare.outputs.version }} || true
