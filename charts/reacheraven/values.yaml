#######################################
# Global Configuration
#######################################
global:
  # Uncomment and customize the example below to set custom node affinity rules.
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #         - matchExpressions:
  #             - key: "kubernetes.io/e2e-az-name"
  #               operator: In
  #               values:
  #                 - "e2e-az1"
  #                 - "e2e-az2"
  affinity: {}

  # Uncomment and customize the example below to add node tolerations.
  # tolerations:
  #   - key: "key1"
  #     operator: "Equal"
  #     value: "value1"
  tolerations: []

  nodeSelector: {}
  # Uncomment and customize the example below to set custom node selectors.
  # nodeSelector:
  #   disktype: ssd
  #   region: us-west-1
  #   zone: us-west-1a
  # nodeSelector: {}

  # Determines when container images are pulled.
  # "IfNotPresent" will use the local image if available.
  imagePullPolicy: "IfNotPresent"

  # Default timezone for the application.
  timezone: "UTC"

#######################################
# Reacheraven Application Configuration
#######################################
reacheraven:

  # Web (Frontend) Configuration
  web:
    enabled: true
    image: "reacheraven/reacheraven-web"
    tag: "v1.0.22"
    replicas: 1  # Number of instances for the web frontend.
    service:
      type: ClusterIP  # Service exposed internally within the cluster.

    # Uncomment and set the hostname to the desired domain.
    # backend:
    # backend API URL for the web application.
    # This can be set to the internal service name or an external URL.
    #  host: http://localhost:8080 
    backend: {}

    # ingress configuration for the web application, this is enabled by default.
    ingress:
      enabled: true
      # Hostname where the web application will be accessible
      host: "reacheraven-web.example.com"
      # Define the paths for routing
      paths:
        - path: /
          pathType: Prefix  # Can also be 'ImplementationSpecific', based on your controller.
 
      # Uncomment and customize the example below to set custom TLS settings.
      # tls:
      #   - hosts:
      #       - reacheraven-web.example.com
      #     secretName: reacheraven-web-tls-secret # you needed to create this secret
      tls: {}

      # Uncomment and customize the example below to set custom annotations.
      # annotations:
      #   # Common configurations for Nginx Ingress Controller:
      #   nginx.ingress.kubernetes.io/use-regex: "true"
      #   nginx.ingress.kubernetes.io/rewrite-target: "/"
      #   # Example for Google Cloud (GKE):
      #   kubernetes.io/ingress.allow-http: "false"
      #   kubernetes.io/ingress.global-static-ip-name: "reacheraven-web-ip"
      #   # Example for AWS ALB Ingress Controller:
      #   alb.ingress.kubernetes.io/scheme: "internet-facing"
      #   alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      #   # Example for Azure Application Gateway Ingress Controller:
      #   appgw.ingress.kubernetes.io/use-private-ip: "true"
      #   appgw.ingress.kubernetes.io/ssl-redirect: "true"
      annotations: {}

    istio:
      enabled: false

      # Uncomment and customize the example below to set custom hosts.
      # hosts:
      #  - reacheraven-web.example.com
      hosts: {}

      # Uncomment and customize the example below to set custom http.
      # http:
      #  - name: "reviews-v2-routes"
      #    match:
      #    - uri:
      #        prefix: "/wpcatalog"
      #    rewrite:
      #      uri: "/newcatalog"
      #    route:
      #    - destination:
      #        host: reviews.prod.svc.cluster.local
      #        subset: v2
      http: {}

  # API Service Configuration
  api:
    enabled: true
    image: "reacheraven/reacheraven-api"
    tag: "v1.0.15"
    replicas: 2  # Number of instances for the API service.
    service:
      type: ClusterIP

    # ingress configuration for the api application, this is enabled by default.
    ingress:
      enabled: true
      # Hostname where the api application will be accessible
      host: "reacheraven-api.example.com"
      # Define the paths for routing
      paths:
        - path: /
          pathType: Prefix  # Can also be 'ImplementationSpecific', based on your controller.
 
      # Uncomment and customize the example below to set custom TLS settings.
      # tls:
      #   - hosts:
      #       - reacheraven-api.example.com
      #     secretName: reacheraven-api-tls-secret # you needed to create this secret
      tls: {}

      # Uncomment and customize the example below to set custom annotations.
      # annotations:
      #   # Common configurations for Nginx Ingress Controller:
      #   nginx.ingress.kubernetes.io/use-regex: "true"
      #   nginx.ingress.kubernetes.io/rewrite-target: "/"
      #   # Example for Google Cloud (GKE):
      #   kubernetes.io/ingress.allow-http: "false"
      #   kubernetes.io/ingress.global-static-ip-name: "reacheraven-api-ip"
      #   # Example for AWS ALB Ingress Controller:
      #   alb.ingress.kubernetes.io/scheme: "internet-facing"
      #   alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      #   # Example for Azure Application Gateway Ingress Controller:
      #   appgw.ingress.kubernetes.io/use-private-ip: "true"
      #   appgw.ingress.kubernetes.io/ssl-redirect: "true"
      annotations: {}

    istio:
      enabled: false

      # Uncomment and customize the example below to set custom hosts.
      # hosts:
      #  - reacheraven-api.example.com
      hosts: {}

      # Uncomment and customize the example below to set custom http.
      # http:
      #  - name: "reviews-v2-routes"
      #    match:
      #    - uri:
      #        prefix: "/wpcatalog"
      #    rewrite:
      #      uri: "/newcatalog"
      #    route:
      #    - destination:
      #        host: reviews.prod.svc.cluster.local
      #        subset: v2
      http: {}

  # Scheduler Service Configuration
  scheduler:
    enabled: true
    image: "reacheraven/reacheraven-scheduler"
    tag: "v1.0.2"
    replicas: 1  # Number of scheduler instances; typically one is sufficient.
    service:
      type: ClusterIP

  # Notifier Service Configuration
  notifier:
    enabled: true
    image: "reacheraven/reacheraven-notifier"
    tag: "v1.0.2"
    replicas: 1  # Number of notifier instances.
    service:
      type: ClusterIP

  dependencies:
    # The dependencies section allows you to configure the subcharts for PostgreSQL,
    # Redis, and RabbitMQ. These are optional components that can be installed

    postgresql:
      # The connection string for PostgreSQL should be stored as a Kubernetes Secret
      # to avoid exposing sensitive data. This value should be set during the Helm
      # installation using a Secret and referenced here.
      connectionString: "postgresql://postgres:changeme@reacheraven-postgresql-hl:5432/reacheraven?sslmode=disable"
      # If true, installs the Bitnami PostgreSQL subchart.
      install: true

    redis:
      # The connection string for Redis should be stored as a Kubernetes Secret
      # to avoid exposing sensitive data. This value should be set during the Helm
      # installation using a Secret and referenced here.
      connectionString: "redis://default:changeme@reacheraven-redis-headless:6379"
      # If "install" is true, the Bitnami Redis chart is deployed.
      install: true

    rabbitmq:
      # The connection string for RabbitMQ should be stored as a Kubernetes Secret
      # to avoid exposing sensitive data. This value should be set during the Helm
      # installation using a Secret and referenced here.
      connectionString: "amqp://user:changeme@reacheraven-rabbitmq-headless:5672/"
      # If true, installs the Bitnami RabbitMQ subchart.
      install: true




#######################################
# PostgreSQL Configuration
#######################################

postgresql:

  # --- Bitnami PostgreSQL Subchart Settings ---
  # Reference: https://artifacthub.io/packages/helm/bitnami/postgresql

  auth:
    # The username for the PostgreSQL user.
    username: "postgres"
    # The password for the PostgreSQL user. This should be set as a Kubernetes Secret
    # to avoid exposing sensitive data. This value should be set during the Helm
    # installation using a Secret and referenced here.
    password: "changeme"
    # The database name to be created in PostgreSQL.
    database: "reacheraven"
  primary:
    persistence:
      enabled: true
      # Suggested minimal size for initial production usage:
      size: 5Gi
  # Additional fields (e.g., resources, metrics, networkPolicy) can be placed here.


#######################################
# Redis Configuration
#######################################

redis:

  # --- Bitnami Redis Subchart Settings ---
  # Single-instance mode (no cluster/replication).
  # Reference: https://artifacthub.io/packages/helm/bitnami/redis

  architecture: "standalone"

  auth:
    # The username for the Redis user.
    username: "default"
    # The password for the Redis user. This should be set as a Kubernetes Secret
    # to avoid exposing sensitive data. This value should be set during the Helm
    # installation using a Secret and referenced here.
    password: "changeme"

  master:
    persistence:
      enabled: true
      # Suggested disk size for a single-instance Redis:
      size: 2Gi
    extraEnvVars:
      - name: ALLOW_EMPTY_PASSWORD
        value: "no"

  # Additional fields (e.g., resources, metrics, networkPolicy) can be placed here.


#######################################
# RabbitMQ Configuration
#######################################
rabbitmq:

  # --- Bitnami RabbitMQ Subchart Settings ---
  # Reference: https://artifacthub.io/packages/helm/bitnami/rabbitmq

  auth:
    # The username for the RabbitMQ user.
    username: "user"
    # The password for the RabbitMQ user. This should be set as a Kubernetes Secret
    # to avoid exposing sensitive data. This value should be set during the Helm
    # installation using a Secret and referenced here.
    password: "changeme"

  extraEnvVars:
    - name: RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS
      value: "yes"
  persistence:
    enabled: true
    # Suggested minimal disk size for queues and logs:
    size: 2Gi
  # Additional fields (e.g., resources, metrics, networkPolicy) can be placed here.
